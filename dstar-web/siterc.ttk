[%#-*- Mode: CPerl; coding: utf-8 -*-%]
[% FILTER null %]
[%
  #------------------------------------------------------------
  # globals
  PROCESS "common.ttk"
%]

##------------------------------------------------------
## import make variables (WEB_*) from siterc.vars
[% PERL %]
   open(my $fh, "siterc.vars")
     or die("open failed for siterc.vars: $!");
   $stash->set($_->[0] => $_->[1])
     foreach (map {chomp; [split(/=/,$_,2)]} <$fh>);
   close($fh);
[% END #-- /perl %]

##------------------------------------------------------
## authorization

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## auth_allow_all()
[%- BLOCK auth_allow_all +%]
    allow from all
    satisfy any
[%- END ##--/block auth_allow_all +%]

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## auth_deny_all()
[%- BLOCK auth_deny_all +%]
    deny from all
    satisfy all
[%- END ##--/block auth_deny_all +%]

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## auth(%opts)
## %opts:
##  label         : label
##  public        : public access? ("no" or Boolean)
##  force_public  : force public access? ("no" or Boolean)
##  allow         : allowed client host patterns (space-separated string, may be empty)
##  satisfy       : satisfy target ("any" or "all"; default="any")
##  auth_name     : basic authentication name
##  auth_provider : basic authentication provider (module name(s))
##  auth_file     : basic authentication user-file
##  auth_external : basic authentication external key
[%- BLOCK auth +%]

  ##-- BEGIN authorization block: $opts.label
  [%- IF opts.public.replace("no","") +%]
    ##-- public=$opts.public
    [%- IF opts.force_public.replace("no","") +%]
      ##-- force_public=$opts.force_public
      Order allow,deny
      [%- PROCESS auth_allow_all +%]
    [%- END ##--/force_public +%]
  [%- ELSE ##--public:else +%]
    ##-- non-public
    Order deny,allow
    deny from all
    satisfy [% opts.satisfy || 'any' +%]

    [%- IF opts.allow +%]
      ##-- host-based access
      [%- FOREACH allowed IN opts.allow.split('\s+') +%]
      allow from $allowed
      [%- END #--/foreach allowed +%]
    [%- END ##--/IF opts.allow +%]

    [%- IF opts.auth_name && opts.auth_provider +%]
      ##-- basic authentication via provider(s) $opts.auth_provider
      AuthType Basic
      AuthBasicProvider $opts.auth_provider
      AuthName "$opts.auth_name"
      [%- IF opts.auth_file == "no" || opts.auth_file == "" ; SET opts.auth_file = "/dev/null" ; END +%]
      [%- IF opts.auth_provider.match('\bfile\b') +%]
         ##-- file-based authentication via $opts.auth_file
         AuthUserFile "[% opts.auth_file %]"
      [%- END +%]
      [%- IF opts.auth_external.replace("no","") +%]
         ##-- external authentication via $opts.auth_external
         AuthExternal $opts.auth_external
      [%- END +%]
      Require valid-user
    [%- END ##--/opts.auth_name && opts.auth_provider +%]
  [%- END ##--/public +%]
  ##-- END authorization block: $opts.label
[% END ##--/block auth %]

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## auth_allow_files(%opts)
## %opts:
##  label   : label
##  match   : regex for apache <FilesMatch> directive
##  files   : file string(s?) for apache <Files> directorive
[%- BLOCK auth_allow_files +%]
  [%- IF opts.match ; SET op="FilesMatch" ; SET arg=opts.match ; ELSE ; SET op="Files" ; SET arg=opts.files ; END -%]
  ##-- ALLOW FILES: $opts.label
  <$op "$arg">
    [%- PROCESS auth_allow_all +%]
  </$op>
[%- END ##--/block auth_allow_files +%]

##~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## auth_deny_files(%opts)
## %opts:
##  label   : label
##  match   : regex for apache <FilesMatch> directive
##  files   : file string(s?) for apache <Files> directorive
[%- BLOCK auth_deny_files +%]
  [%- IF opts.match ; SET op="FilesMatch" ; SET arg=opts.match ; ELSE ; SET op="Files" ; SET arg=opts.files ; END -%]
  ##-- DENY FILES: $opts.label
  <$op "$arg">
    [%- PROCESS auth_deny_all +%]
  </$op>
[%- END ##--/block auth_deny_files +%]


[% END ##--/filter null %]

###--- BEGIN dstar/$WEB_CORPUS apache site configuration
###    + AUTOMATICALLY GENERATED BY [% CURDIR _ "/" _ template.name %] ; EDIT AT YOUR OWN PERIL
###    + add the directives in this file to your apache server configration file
###      and reload the apache server configuration to enable

##-- aliases
[% FOREACH alias IN WEB_SITE_ALIAS.split('\s+') %]
Alias [% alias %] [% WEB_SITE_DIR.remove('/$') %]/
[% END ##--/foreach alias %]

[%- IF ! WEB_SITE_MOD_REWRITE.replace("no","") +%]
 [%- FOREACH alias IN WEB_SITE_ALIAS.split('\s+') +%]
##-- redirects ([% alias %])
Redirect $alias/query $alias/ddc-cgi.perl
Redirect $alias/search $alias/dstar.perl
Redirect $alias/lizard $alias/lizard.perl
Redirect $alias/hist $alias/hist.perl
Redirect $alias/tcf $alias/tcf.perl
Redirect $alias/doc //odo.dwds.de/~moocow/software/ddc
Redirect $alias/privacy $WEB_SITE_PRIVACY_URL
Redirect $alias/imprint $WEB_SITE_IMPRINT_URL

 [%- END ##--/foreach alias +%]
[%- END ##-- rewrites/redirects +%]

##-- directory configuration
<Directory "[% WEB_SITE_DIR.remove('/$') %]/">
  AddHandler cgi-script .perl
  Options +ExecCGI +FollowSymLinks
  AllowOverride All
  DirectoryIndex dstar.perl

  [%- PROCESS auth
      opts={
	    label=>"WEB_SITE_*",
	    public=>WEB_SITE_PUBLIC,
	    force_public=>WEB_SITE_FORCE_PUBLIC,
	    allow=>WEB_SITE_ALLOW,
	    auth_name=>WEB_SITE_AUTH_NAME,
	    auth_provider=>WEB_SITE_AUTH_PROVIDER,
	    auth_file=>WEB_SITE_AUTH_FILE,
	    auth_external=>WEB_SITE_AUTH_EXTERNAL,
	   } +%]

  ##-- web: config.perl: restricted read-only access to dstar configuration variables
  <Files "config.perl">
    [%- PROCESS auth
        opts={
	      label=>"config.perl access",
	      public=>"no",
	      allow=>WEB_SITE_CONFIG_ALLOW,
	      auth_name=>WEB_SITE_CONFIG_AUTH_NAME,
	      auth_file=>WEB_SITE_CONFIG_AUTH_FILE,
	      auth_provider=>"file",
 	     } +%]
  </Files>


[%- IF ! WEB_SITE_PUBLIC.replace("no","") +%]
  [%- PROCESS auth_allow_files
     opts={
	   label=>"safe common files (css,javascript) for public subdirectories",
	   "match"=>"\.(css|js)\$"
	  } +%]

  [%- IF WEB_HIST_PUBLIC.replace("no","") +%]

    [%- PROCESS auth_allow_files
        opts={
	      label=>"allow public histograms (WEB_HIST_PUBLIC=" _ WEB_HIST_PUBLIC _ ")"
	      match=>"^(hist.perl|dhist-plot.perl|dhist-cache.json)\$"
	     } +%]
  [%- END ##--/WEB_HIST_PUBLIC +%]
[%- END ##--/WEB_SITE_PUBLIC +%]

[%- IF ! WEB_HIST_ENABLED.replace("no","") +%]
  [%- PROCESS auth_deny_files
      opts=>{
	     label=>"disable histograms (WEB_HIST_ENABLED=" _ WEB_HIST_ENABLED _")"
	     "files"=>"dhist-plot.perl"
	    } +%]

[%- END ##--/WEB_HIST_ENABLED +%]

  [%- PROCESS auth_deny_files
     opts=>{
	    label=>"web: paranoia (nothing to see here, move along)",
	    match=>"Makefile|README|siterc|\\.svn|(\\.(ttk|rc|pod|txt|pm|sh|mak)\$)|~\$"
	   } +%]

 [%- IF WEB_SITE_MOD_REWRITE != "no" +%]
   ##-- rewrites
   RewriteEngine on
   [%- FOREACH alias IN WEB_SITE_ALIAS.split('\s+') +%]
    ##-- rewrites: $alias
    RewriteBase [% alias.remove('/$') +%]
    RewriteRule ^query(\?.*)?\$ ddc-cgi.perl\$1
    RewriteRule ^search(\?.*)?\$ dstar.perl\$1
    RewriteRule ^lizard(\?.*)?\$ lizard.perl\$1
    RewriteRule ^hist(\?.*)?\$ hist.perl\$1
    RewriteRule ^tcf(\?.*)?\$ tcf.perl\$1
    RewriteRule ^status([\?\/\#].*)?\$ ddc-cgi.perl?mode=req&q=status
    RewriteRule ^vstatus([\?\/\#].*)?\$ ddc-cgi.perl?mode=req&q=vstatus
    RewriteRule ^info([\?\/\#].*)?\$ ddc-cgi.perl?mode=req&q=info
    RewriteRule ^details([\?\/\#].*)?\$ details.perl\$1
    RewriteRule ^config-(all|env|auth|site|auth|stash)([\?\/\#].*)?\$ config.perl?fmt=\$1
    RewriteRule ^config([\?\/\#].*)?\$ config.perl\$1
    RewriteRule ^diacollo/profile([\?\/].*)?\$ diacollo/profile.perl\$1
    RewriteRule ^lexdb/view([\?\/].*)?\$ lexdb/view.perl?\$1
    RewriteRule ^lexdb/export([\?\/].*)?\$ lexdb/export.perl\$1
    RewriteRule ^lexdb/suggest([\?\/].*)?\$ lexdb/suggest.perl\$1
    RewriteRule ^semcloud/(cats|books|docs|pages|terms)([\?\/].*)?\$ semcloud/\$1.perl\$2
    RewriteRule ^semcloud/(query|semq)([\?\/].*)?\$ semcloud/semq.perl\$2
    RewriteRule ^doc/?(.*)?\$ //odo.dwds.de/~moocow/software/ddc/\$1
    RewriteRule ^privacy([\?\/\#].*)?\$ ../privacy\$1
    RewriteRule ^imprint([\?\/\#].*)?\$ ../imprint\$1
   [%- END ##--/rewrites: $alias +%]
  [%- END ##--/WEB_SITE_MOD_REWRITE +%]
</Directory>


[%#
 ##-- internal-use-only subdirectories
 ##  + prior to 2021-04-23, 'config' subdirectory access was disabled here
 ##  + as of 2021-04-23, this fragment would deny all access to the 'config' rewrite-alias for config.perl
 ##    (which is weird, since "config.perl" isn't actually a directory)
 %]
[%- IF WEB_SITE_MOD_REWRITE.replace("no","") == "" +%]
 ##-- web: paranoia: internal-use-only subdirectories: no access under any circumstances
 [%- FOREACH subdir IN ['config'] +%]
  <Directory "[% WEB_SITE_DIR.remove('/$') %]/$subdir/">
     [%- PROCESS auth_deny_all +%]
  </Directory>
 [%- END ##--/FOREACH subdir +%]
[%- END ##--/WEB_SITE_MOD_REWRITE +%]

##-- "safe" common subdirectries: always allow unrestricted access
[%- FOREACH subdir IN ['images','jquery-ui','highslide'] +%]
<Directory "[% WEB_SITE_DIR.remove('/$') %]/$subdir/">
  [%- PROCESS auth_allow_all +%]
</Directory>
[%- END ##--/FOREACH subdir +%]

##-- subdirectory: diacollo/
<Directory "[% WEB_SITE_DIR.remove('/$') %]/diacollo/">
  ##-- WEB_DIACOLLO_ENABLED=$WEB_DIACOLLO_ENABLED
  [%- IF ! WEB_DIACOLLO_ENABLED.replace("no","") +%]
    [%- PROCESS auth_deny_all +%]
  [%- ELSE +%]
    DirectoryIndex index.perl

    ##-- WEB_DIACOLLO_PUBLIC=$WEB_DIACOLLO_PUBLIC
    [%- IF WEB_DIACOLLO_PUBLIC.replace("no","") +%]
      [%- PROCESS auth_allow_all +%]
    [%- END ##--/WEB_DIACOLLO_PUBLIC +%]

    [%+ PROCESS auth_deny_files
      opts={
	    label=>"diacollo: paranoia: internal use only"
	    match=>"Makefile|README|\\.svn|(\\.(ttk|rc|pod|txt|pm|mak)\$)|~\$"
	   } -%]

  [%- END ##--/WEB_DIACOLLO_ENABLED +%]
</Directory>

##-- subdirectory: diacollo/data/ : always deny access
<Directory "[% WEB_SITE_DIR.remove('/$') %]/diacollo/data/">
  [%- PROCESS auth_deny_all +%]
</Directory>

##-- subdirectory: lexdb/
<Directory "[% WEB_SITE_DIR.remove('/$') %]/lexdb/">
  ##-- WEB_LEXDB_ENABLED=$WEB_LEXDB_ENABLED
  [%- IF ! WEB_LEXDB_ENABLED.replace("no","") +%]
    [%- PROCESS auth_deny_all +%]
  [%- ELSE +%]
    DirectoryIndex view.perl

    ##-- WEB_LEXDB_PUBLIC=$WEB_LEXDB_PUBLIC
    [%- IF WEB_LEXDB_PUBLIC.replace("no","") +%]
      [%- PROCESS auth_allow_all +%]
    [%- END ##--/WEB_LEXDB_PUBLIC +%]

    ##-- lexdb: safe files: always allow access
    <FilesMatch "version\.txt">
      satisfy any
    </FilesMatch>


    [%- PROCESS auth_deny_files
        opts=>{
	       label=>"lexdb: paranoia: internal use only",
	       match=>"Makefile|README|\\.svn|(\\.(ttk|rc|pod|txt|pm|sqlite|mak)\$)|~\$",
	      } +%]

  [%- END ##--/WEB_LEXDB_ENABLED +%]
</Directory>

[%- IF WEB_LEXDB_CAB_URL != "" +%]
##-- lexdb/cab: proxy configuration
<Location "[% WEB_SITE_ALIAS.split('\s+').first.remove('/$') +%]/lexdb/cab">
  ##-- WEB_LEXDB_CAB_URL=$WEB_LEXDB_CAB_URL
  [%- PROCESS auth
      opts={
	    label=>"lexdb/cab proxy",
	    public=>WEB_LEXDB_CAB_PUBLIC,
	    force_public=>"no",
	    allow=>WEB_SITE_ALLOW,
	    auth_name=>WEB_SITE_AUTH_NAME,
	    auth_provider=>WEB_SITE_AUTH_PROVIDER,
	    auth_file=>WEB_SITE_AUTH_FILE,
	    auth_external=>WEB_SITE_AUTH_EXTERNAL,
	   } +%]
  ProxyPass        "$WEB_LEXDB_CAB_URL"
  ProxyPassReverse "$WEB_LEXDB_CAB_URL"
</Location>
[%- END ##--/WEB_LEXDB_CAB_URL +%]

##-- subdirectory: semcloud/
<Directory "[% WEB_SITE_DIR.remove('/$') %]/semcloud/">
  ##-- WEB_SEMCLOUD_ENABLED=$WEB_SEMCLOUD_ENABLED
  [%- IF ! WEB_SEMCLOUD_ENABLED.replace("no","") +%]
    [%- PROCESS auth_deny_all +%]
  [%- ELSE +%]
    DirectoryIndex index.perl

    ##-- WEB_SEMCLOUD_PUBLIC=$WEB_SEMCLOUD_PUBLIC
    [%- IF WEB_SEMCLOUD_PUBLIC.replace("no","") +%]
      [%- PROCESS auth_allow_all +%]
    [%- ELSE +%]
    [%- END ##--/WEB_SEMCLOUD_PUBLIC +%]


    [%- PROCESS auth_deny_files
        opts=>{
	       label=>"semcloud: paranoia: internal use only",
	       match=>"Makefile|README|\\.svn|(\\.(ttk|rc|pod|txt|pm|bin|d|mak)\$)|~\$",
	      } +%]
  [%- END ##--/WEB_SEMCLOUD_ENABLED +%]
</Directory>

##-- semcloud: paranoia: internal-use-only subdirectories: no access under any circumstances
[%- FOREACH subdir IN ['dc-map.d','dc-pages-map.d'] +%]
<Directory "[% WEB_SITE_DIR.remove('/$') %]/semcloud/$subdir/">
  [%- PROCESS auth_deny_all +%]
</Directory>
[%- END ##--/FOREACH subdir +%]

##-- subdirectory: stats/
<Directory "[% WEB_SITE_DIR.remove('/$') %]/stats/">
  ##-- WEB_STATS_ENABLED=$WEB_STATS_ENABLED
  [%- IF ! WEB_STATS_ENABLED.replace("no","") +%]
    [%- PROCESS auth_deny_all +%]
  [%- ELSE +%]
    Options -ExecCGI +FollowSymLinks +Indexes

    ##-- WEB_STATS_PUBLIC=$WEB_STATS_PUBLIC
    [%- IF WEB_STATS_PUBLIC.replace("no","") +%]
      [%- PROCESS auth_allow_all +%]
    [%- END ##--/WEB_STATS_PUBLIC +%]

    [%+ PROCESS auth_deny_files
      opts={
	    label=>"stats: paranoia: internal use only"
	    match=>"Makefile|README|\\.svn|(\\.(ttk|rc|pod|pm|mak)\$)|~\$"
	   } -%]
    [%+ PROCESS auth_allow_files
      opts={
	    label=>"stats: override: allow"
	    match=>"^((count|ddc|lexdb|extra).*\\.txt|indexed\\.stamp)\$"
	   } -%]

  [%- END ##--/WEB_STATS_ENABLED +%]
</Directory>


###--- END dstar/$WEB_CORPUS site configuration
