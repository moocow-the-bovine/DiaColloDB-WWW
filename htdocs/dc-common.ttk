[% FILTER null %]
[%#------------------------------------------------------------
  # File: dc-common.ttk
  # Description: diacollo: common variables
 %]
[% TRY %]
  [%#-- try to load ../common.ttk for dstar web environment --%]
  [% PROCESS "../common.ttk" root_dir="../" %]
[% CATCH %]
  [%#-- standalone mode: simulate dstar/web/common.ttk --%]
  [% PROCESS "dstar/common.ttk" root_dir="dstar/" %]
[% END %]

[% PERL %]
  $stash->set(VERSION=>$DiaColloDB::WWW::VERSION);
  #print STDERR "root='", $stash->get('root_dir'), "; diacollo_standalone=", $stash->get('diacollo_standalone'), "\n";
[% END %]


[%# USE Dumper %][%#-- debug: Dumper.dump(variable) %]
[% USE JSON::Escape(pretty=>0) %][%#-- json() pseudo-method %]
[% SET package = "DiaColloDB::WWW" %]
[% SET
   gen_label = "DiaColloDB::WWW"
%]

[% PERL %]
  ##-- environment
  $stash->set(ENV=>\%ENV);
  $stash->set('VERSION'=>"$DiaColloDB::VERSION");
[% END %]

[%##-- timing %]
[% db.t_start() %]
[% PERL %]
   $stash->set('elapsed'=>sub { $stash->get('cdb')->t_elapsed() });
[% END %]

[%##---------------------------------------------------------
  ## DiaColloDB logging
%]
[% PERL %]
my $logLevel = 'WARN';
#$logLevel   = 'TRACE'; ##-- DEBUG
DiaColloDB->ensureLog(level=>$logLevel, rootLevel=>'FATAL');
[% END %]


[%##---------------------------------------------------------
  ## local db
%]
[% SET dburl = "file://data?ddcServer=" _ dstar.server_host _ "%3A" _ dstar.server_port %]

[% PERL %]
  ##-- always load db header; check for index_tdf
  if (-r "data/header.json") {
    $stash->set('dbhdr' => DiaColloDB::Utils::loadJsonFile("data/header.json") // {});
  }
  $stash->set("tdf_enabled" => $stash->get('dbhdr.index_tdf'));
[% END %]

[%##---------------------------------------------------------
  ## DiaColloDB dbinfo
%]
[%# PROCESS opendb; SET dbinfo = dbcli.dbinfo; dbcli.close %]

[%##-- query parameters
  ## l     : query LEMMA(S) or /REGEX/  ##-- COMPAT
  ## q     : query request LEMMA(S) or /REGEX/ or ATTR:VAL1|...|VALn or ATTR:/REGEX/
  ## d     : query DATE(S) or /REGEX/ or MIN:MAX
  ## sc    : score function {f,fm,lf,lfm,mi,ld,ll}
  ## k     : pruning: return only k-best items per date
  ## cut   : pruning: minimum score
  ## global : pruning: prune globally (vs. slice-locally)?
  ## diff  : low-level diff operation
  ## f     : output format {text,json,html}
  ## debug : debuging mode (boolean)
%]
[% PERL %]
  my $vars = $stash->get('cdb.vars');
  $_ =~ s/^\s+$// foreach (values %$vars);
  $stash->set('qquery'=>(grep {defined($_)} @$vars{map {("a$_",$_)} qw(query q lemmata lemmas lemma lem l)})[0] // '');
  $stash->set('qdate'=>(grep {defined($_)} @$vars{map {("a$_",$_)} qw(dates date d)})[0] // '');
  $stash->set('qslice'=>(grep {defined($_)} @$vars{map {("a$_",$_)} qw(dslice slice ds sl s)})[0] // 10);

  $stash->set('qbquery'=>(grep {defined($_)} @$vars{qw(bquery bq blemmata blemmas blemma blem bl)})[0] // '');
  $stash->set('qbdate'=>(grep {defined($_)} @$vars{qw(bdates bdate bd)})[0] // '');
  $stash->set('qbslice'=>(grep {defined($_)} @$vars{qw(bdslice bslice bds bsl bs)})[0] // '');;
  foreach (qw(date slice)) {
    $stash->set("qb$_"=>$stash->get("q$_")) if ($stash->get("qb$_") eq '');
  }
  foreach (qw(query date slice bquery bdate bslice)) {
    $stash->set($_=>'') if ($stash->get($_) eq '*');
  }

  $stash->set('qgroupby'=>(grep {defined($_)} @$vars{qw(groupby group gr gb g)})[0] // '');

  $stash->set('qscore'=>(grep {defined($_)} @$vars{qw(score sc sf)})[0] // 'ld');
  $stash->set('qkbest'=>(grep {defined($_)} @$vars{qw(kbest kb k)})[0] // 10);
  $stash->set('qcutoff'=>(grep {defined($_)} @$vars{qw(cutoff cut co)})[0] // '');
  $stash->set('qdiff'=>(grep {defined($_)} @$vars{qw(diffop diff D)})[0] // 'adiff');
  $stash->set('qglobal'=>(grep {defined($_)} @$vars{qw(global glo gl G)})[0] // '');
  $stash->set('qdebug'=>(grep {defined($_)} @$vars{qw(debug dbg)})[0] // 0);

  my $tdf_enabled = $stash->get('tdf_enabled');
  my $prf = (grep {defined($_)} @$vars{qw(profile prof prf pr p)})[0] // '2';
  if    ($prf =~ m{^(?:[c]|f?1?2$)}i) { $prf = '2'; }
  elsif ($prf =~ m{^(?:[uwx]|f?1$)}i)   { $prf = '1'; }
  elsif ($tdf_enabled && $prf =~ m{^(?:v|vec|vs|vsem|sem|td[mf])$}i) { $prf = 'tdf'; }
  elsif ($prf =~ m{^(?:ddc$)}i)        { $prf = 'ddc'; }
  elsif ($prf =~ m{^(?:d(?:iff)?[-/:_]?)(?:[c]|f?1?2$)}i) { $prf = 'diff-2'; }
  elsif ($prf =~ m{^(?:d(?:iff)?[-/:_]?)(?:[uwx]|f?1$)}i)  { $prf = 'diff-1'; }
  elsif ($tdf_enabled && $prf =~ m{^(?:d(?:iff)?[-/:_]?)(?:v|vec|vs|vsem|sem|td[mf])$}i) { $prf = 'diff-tdf'; }
  elsif ($prf =~ m{^(?:d(?:iff)?[-/:_]?)(?i:ddc$)}i)       { $prf = 'diff-ddc'; }

  $stash->set('qprofile'=>$prf);

  my $fmt = (grep {defined($_)} @$vars{qw(format fmt f)})[0] // 'html';
  my %fmt_alias = (
		   htm=>'html',
		   csv=>'text',
		   tsv=>'text',
		   txt=>'text',
		   t=>'text',
		   js=>'json',
		   j=>'json',
		   storable=>'sto',
		   bin=>'sto',
		   gm=>'gmotion',
		   hc=>'hichart',
		   hi=>'hichart',
		   chart=>'hichart',
		   highchart=>'hichart',
		   highcharts=>'hichart',
		   b=>'bubble',
		   bub=>'bubble',
		   bubbles=>'bubble',
		   c=>'cloud',
		   cl=>'cloud',
		   cld=>'cloud',
		  );
  $fmt = $fmt_alias{$fmt} if (exists($fmt_alias{$fmt}));
  $stash->set('qformat' => $fmt);

  $stash->set('user_query'=>{
			     (map {($_=>$stash->get("q$_"))}
			      qw(query date slice bquery bdate bslice groupby score kbest cutoff diff global profile format debug))
			    });
[% END %]

[%##---------------------------------------------------------
  ## URLs
%]
[% DEFAULT
  dc_root       = cdb.uriDir();
  dcp_url_base  =  dc_root _ "/profile.perl";
  dcp_url_local = "./profile.perl";
  ##--
  ddc_url_root  = root_url;
%]
[% SET
   uroot    = cdb.uuri(dc_root);
   uprofile = cdb.uuri(dcp_url_base, user_query);
   uplocal  = cdb.uuri(dcp_url_local, user_query);
%]

[%##---------------------------------------------------------
  ## db open
%]
[% BLOCK opendb %]
[% PERL ##-- opendb:perl %]
  ##------------------------------------------------------------
  ## open DB
  my $dburl = $stash->get('dburl');
  my $dbcli = DiaColloDB::Client->new($dburl)
   or die("$0: failed to open DiaColloDB URL $dburl: $!");
  #$dbcli->{ddcServer} = $stash->get('dstar.server_host').":".$stash->get('dstar.server_port');
  $stash->set('dbcli'=>$dbcli);
[% END ##--/opendb:perl %]
[% END ##--/opendb %]


[% END ##-- end filter null %]
[%#--
  # Local Variables:
  # mode: CPerl
  # coding: utf-8
  # End:
%]
