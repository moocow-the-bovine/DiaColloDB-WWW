[% FILTER null %]
[%#------------------------------------------------------------
  # globals
%]
[% PROCESS "dc-common.ttk" %]
[% PROCESS opendb %]
  [% PERL %]
#------------------------------------------------------------
# db profile
sub main {
  ##-- get profile
  my $dbcli = $stash->get('dbcli');
  my $qrel  = $stash->get('qprofile');

  ##-- sanity check(s)
  die("term-document index required for profile type '$qrel' unavailable for this collection") 
    if ($qrel =~ /tdf/ && !$stash->get('tdf_enabled'));

  my ($mp);
  if ($qrel =~ s/^(?:d(?!dc)(?:iff)?|co?mp(?:are)?)[:\-\/_\.\:]//) {
    $mp = $dbcli->compare($qrel,
			  ##
			  aquery=>$stash->get('qquery'),
			  adate=>$stash->get('qdate'),
			  aslice=>$stash->get('qslice'),
			  ##
			  bquery=>$stash->get('qbquery'),
			  bdate=>$stash->get('qbdate'),
			  bslice=>$stash->get('qbslice'),
			  ##
			  groupby=>$stash->get('qgroupby'),
			  score=>$stash->get('qscore'),
			  kbest=>$stash->get('qkbest') // 10,
			  cutoff=>$stash->get('qcutoff'),
			  diff=>$stash->get('qdiff'),
			  global=>$stash->get('qglobal'),
			 );
  }
  else {
    $mp = $dbcli->profile($qrel,
			  query=>$stash->get('qquery'),
			  date=>$stash->get('qdate'),
			  slice=>$stash->get('qslice'),
			  groupby=>$stash->get('qgroupby'),
			  score=>$stash->get('qscore'),
			  kbest=>$stash->get('qkbest') // 10,
			  cutoff=>$stash->get('qcutoff'),
			  global=>$stash->get('qglobal'),
			 );
  }
  die("$0: failed to retrieve profile: ", $dbcli->{error}//$@) if (!$mp);
  $dbcli->close();

  ##-- dump profile
  my $cdb = $stash->get('cdb');
  my $dbg = $stash->get('qdebug');
  my $fmt = $stash->get('qformat') || 'text';
  select STDOUT;
  if ($fmt =~ m/^(?:te?xt|[ct]sv)$/i) {
    ##-- dump: text
    $cdb->cgi('charset','utf8');
    print $cdb->cgi('header',
		    '-type'=>'text/plain',
		    #($dbg ? qw() : ('-Content-Disposition'=>"inline; filename=\"profile.txt\"")),
		   );
    $mp->saveTextFile(\*STDOUT);
  }
  elsif ($fmt =~ m/^(?:json)/i) {
    ##-- dump: json
    $cdb->cgi('charset','utf8');
    print $cdb->cgi('header',
		    '-type'=>($dbg ? 'text/plain' : 'application/json'),
		    #($dbg ? qw() : ('-Content-Disposition'=>"inline; filename=\"profile.json\"")),
		   );
    print DiaColloDB::Utils::saveJsonString($mp, pretty=>$dbg, canonical=>$dbg);
  }
  elsif ($fmt =~ m/^(?:sto)/i) {
    ##-- dump: storable
    use Storable;
    $cdb->{charset} = undef;
    $cdb->cgi('charset','');
    binmode(STDOUT,':raw');
    print $cdb->cgi('header',
		    '-type'=>($dbg ? 'text/plain' : 'application/perl-storable'),
		    ($dbg ? qw() : ('-Content-Disposition'=>"inline; filename=\"profile.sto\"")),
		   );
    Storable::nstore_fd($mp, \*STDOUT);
  }
  elsif ($fmt =~ m/^(?:html)/i) {
    ##-- dump: html
    $cdb->cgi('charset','utf8');
    print $cdb->cgi('header', '-type'=>($dbg ? 'text/plain' : 'text/html'));
    $mp->saveHtmlFile(\*STDOUT);
  }
  else {
    die "$0: unknown output format '$fmt'";
  }
}
main();
[% END ##--/PERL %]
[% END ##--/filter null %]
[%#--
 ;; Local Variables:
 ;; mode: CPerl
 ;; coding: utf-8
 ;; End:
%]
